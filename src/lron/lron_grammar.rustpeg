/*
  This Source Code Form is subject to the terms of the Mozilla Public
  License, v. 2.0. If a copy of the MPL was not distributed with this
  file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

//! lron stand for Lightroom Object Notation
//! Some sort of JSON specific to Lightroom
//!
//! lron data syntax is defined in this PEG grammar.

use std::str::FromStr;

use super::Object;
use super::Value;
use super::Pair;

pub root -> Object
    = key:identifier _"="_ value:array _
{ Object::Pair(Pair{key, value: Value::Dict(value)}) }

array -> Vec<Object>
    = "{" _ v:(object ** (_","_)) _(",")?_ "}" { v }

object -> Object
    = a:array { Object::Dict(a) } /
    p:pair { Object::Pair(p) } /
    s:string_literal { Object::Str(s) } /
    z:zstr { Object::ZStr(z) } /
    n:int { Object::Int(n) }

pair -> Pair
    = key:identifier _"="_ value:value { Pair { key, value } } /
    "[" key:string_literal "]" _"="_ value:value { Pair { key, value } }

value -> Value
    = i:int { Value::Int(i) } /
    b:bool { Value::Bool(b) } /
    f:float { Value::Float(f) } /
    s:string_literal { Value::Str(s) } /
    a:array { Value::Dict(a) } /
    z:zstr { Value::ZStr(z) }

int -> i64
    = n:$("-"? [0-9]+) !"." { i64::from_str(n).unwrap() } / #expected("integer")

bool -> bool
    = "true" { true } / "false" { false }

float -> f64
    = f:$("-"? [0-9]+ "." [0-9]+) { f64::from_str(f).unwrap() } / #expected("floating point")

identifier -> String
    = #quiet<s:$([a-zA-Z0-9_]+) { s.to_string() }> / #expected("identifier")

string_literal -> String
    = ["] s:$([^"]*) ["] { s.to_string() }

zstr -> String
    = "ZSTR" _ s:string_literal { s }

whitespace = #quiet<[ \r\n\t]+>

_ = whitespace*
